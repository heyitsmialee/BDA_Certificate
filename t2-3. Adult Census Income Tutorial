{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":498,"sourceType":"datasetVersion","datasetId":225},{"sourceId":12189494,"sourceType":"datasetVersion","datasetId":1633303}],"dockerImageVersionId":30145,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 성인 인구조사 소득 예측\n\n- age: 나이\n- workclass: 고용 형태\n- fnlwgt: 사람의 대표성을 나타내는 가중치(final weight)\n- education: 교육 수준\n- education.num: 교육 수준 수치\n- marital.status: 결혼 상태\n- occupation: 업종\n- relationship: 가족 관계\n- race: 인종\n- sex: 성별\n- capital.gain: 양도 소득\n- capital.loss: 양도 손실\n- hours.per.week: 주당 근무 시간\n- native.country: 국적\n- income: 수익 (예측해야 하는 값)","metadata":{}},{"cell_type":"code","source":"# 시험환경 세팅 (코드 변경 X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"../input/adult-census-income/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","metadata":{"execution":{"iopub.status.busy":"2025-06-18T14:15:57.443151Z","iopub.execute_input":"2025-06-18T14:15:57.443472Z","iopub.status.idle":"2025-06-18T14:15:57.563313Z","shell.execute_reply.started":"2025-06-18T14:15:57.443436Z","shell.execute_reply":"2025-06-18T14:15:57.562296Z"},"trusted":true},"outputs":[{"execution_count":193,"output_type":"execute_result","data":{"text/plain":"((26048, 15), (6513, 15), (26048, 2), (6513, 2))"},"metadata":{}}],"execution_count":193},{"cell_type":"markdown","source":"# 사용자 코딩","metadata":{}},{"cell_type":"markdown","source":"## 라이브러리 불러오기","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.565327Z","iopub.execute_input":"2025-06-18T14:15:57.565681Z","iopub.status.idle":"2025-06-18T14:15:57.570878Z","shell.execute_reply.started":"2025-06-18T14:15:57.565636Z","shell.execute_reply":"2025-06-18T14:15:57.569775Z"}},"outputs":[],"execution_count":194},{"cell_type":"markdown","source":"## 데이터 불러오기(생략)","metadata":{}},{"cell_type":"code","source":"# 시험환경에서는 아래와 같이 제공된다고 함\n# import pandas as pd\n# X_test = pd.read_csv(\"data/X_test.csv\")\n# X_train = pd.read_csv(\"data/X_train.csv\")\n# y_train = pd.read_csv(\"data/y_train.csv\")","metadata":{"execution":{"iopub.status.busy":"2025-06-18T14:15:57.572024Z","iopub.execute_input":"2025-06-18T14:15:57.572233Z","iopub.status.idle":"2025-06-18T14:15:57.585466Z","shell.execute_reply.started":"2025-06-18T14:15:57.572207Z","shell.execute_reply":"2025-06-18T14:15:57.584506Z"},"trusted":true},"outputs":[],"execution_count":195},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"X_train.info(), X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.587561Z","iopub.execute_input":"2025-06-18T14:15:57.588209Z","iopub.status.idle":"2025-06-18T14:15:57.629875Z","shell.execute_reply.started":"2025-06-18T14:15:57.588160Z","shell.execute_reply":"2025-06-18T14:15:57.628853Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 26048 entries, 21851 to 25716\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              26048 non-null  int64 \n 1   age             26048 non-null  int64 \n 2   workclass       24592 non-null  object\n 3   fnlwgt          26048 non-null  int64 \n 4   education       26048 non-null  object\n 5   education.num   26048 non-null  int64 \n 6   marital.status  26048 non-null  object\n 7   occupation      24585 non-null  object\n 8   relationship    26048 non-null  object\n 9   race            26048 non-null  object\n 10  sex             26048 non-null  object\n 11  capital.gain    26048 non-null  int64 \n 12  capital.loss    26048 non-null  int64 \n 13  hours.per.week  26048 non-null  int64 \n 14  native.country  25587 non-null  object\ndtypes: int64(7), object(8)\nmemory usage: 3.2+ MB\n","output_type":"stream"},{"execution_count":196,"output_type":"execute_result","data":{"text/plain":"(None,\n           id  age  workclass  fnlwgt     education  education.num  \\\n 21851  21851   36    Private  241998     Bachelors             13   \n 7632    7632   53    Private  103950       Masters             14   \n 27878  27878   19    Private  203061  Some-college             10   \n 14121  14121   20    Private  102607       HS-grad              9   \n 32345  32345   54  State-gov  138852       HS-grad              9   \n \n            marital.status         occupation   relationship   race     sex  \\\n 21851  Married-civ-spouse       Craft-repair        Husband  White    Male   \n 7632             Divorced     Prof-specialty  Not-in-family  White  Female   \n 27878       Never-married       Tech-support  Not-in-family  White  Female   \n 14121       Never-married  Handlers-cleaners      Own-child  White    Male   \n 32345  Married-civ-spouse     Prof-specialty        Husband  White    Male   \n \n        capital.gain  capital.loss  hours.per.week native.country  \n 21851             0             0              50  United-States  \n 7632              0             0              40  United-States  \n 27878             0             0              25  United-States  \n 14121             0             0              30  United-States  \n 32345             0             0              40  United-States  )"},"metadata":{}}],"execution_count":196},{"cell_type":"code","source":"X_test.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.631244Z","iopub.execute_input":"2025-06-18T14:15:57.631498Z","iopub.status.idle":"2025-06-18T14:15:57.649245Z","shell.execute_reply.started":"2025-06-18T14:15:57.631468Z","shell.execute_reply":"2025-06-18T14:15:57.648136Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 6513 entries, 20901 to 25782\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              6513 non-null   int64 \n 1   age             6513 non-null   int64 \n 2   workclass       6133 non-null   object\n 3   fnlwgt          6513 non-null   int64 \n 4   education       6513 non-null   object\n 5   education.num   6513 non-null   int64 \n 6   marital.status  6513 non-null   object\n 7   occupation      6133 non-null   object\n 8   relationship    6513 non-null   object\n 9   race            6513 non-null   object\n 10  sex             6513 non-null   object\n 11  capital.gain    6513 non-null   int64 \n 12  capital.loss    6513 non-null   int64 \n 13  hours.per.week  6513 non-null   int64 \n 14  native.country  6391 non-null   object\ndtypes: int64(7), object(8)\nmemory usage: 814.1+ KB\n","output_type":"stream"}],"execution_count":197},{"cell_type":"code","source":"# null 값이 있는 컬럼\nX_train.isna().sum()\nna_cols = ['workclass', 'occupation', 'native.country']\nX_train[na_cols]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.650898Z","iopub.execute_input":"2025-06-18T14:15:57.651268Z","iopub.status.idle":"2025-06-18T14:15:57.691298Z","shell.execute_reply.started":"2025-06-18T14:15:57.651221Z","shell.execute_reply":"2025-06-18T14:15:57.689855Z"}},"outputs":[{"execution_count":198,"output_type":"execute_result","data":{"text/plain":"              workclass         occupation native.country\n21851           Private       Craft-repair  United-States\n7632            Private     Prof-specialty  United-States\n27878           Private       Tech-support  United-States\n14121           Private  Handlers-cleaners  United-States\n32345         State-gov     Prof-specialty  United-States\n...                 ...                ...            ...\n2669            Private    Exec-managerial  United-States\n17536           Private   Transport-moving  United-States\n6201            Private      Other-service  United-States\n27989  Self-emp-not-inc     Prof-specialty  United-States\n25716           Private       Adm-clerical  United-States\n\n[26048 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>workclass</th>\n      <th>occupation</th>\n      <th>native.country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21851</th>\n      <td>Private</td>\n      <td>Craft-repair</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>7632</th>\n      <td>Private</td>\n      <td>Prof-specialty</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>27878</th>\n      <td>Private</td>\n      <td>Tech-support</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>14121</th>\n      <td>Private</td>\n      <td>Handlers-cleaners</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>32345</th>\n      <td>State-gov</td>\n      <td>Prof-specialty</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2669</th>\n      <td>Private</td>\n      <td>Exec-managerial</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>17536</th>\n      <td>Private</td>\n      <td>Transport-moving</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>6201</th>\n      <td>Private</td>\n      <td>Other-service</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>27989</th>\n      <td>Self-emp-not-inc</td>\n      <td>Prof-specialty</td>\n      <td>United-States</td>\n    </tr>\n    <tr>\n      <th>25716</th>\n      <td>Private</td>\n      <td>Adm-clerical</td>\n      <td>United-States</td>\n    </tr>\n  </tbody>\n</table>\n<p>26048 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":198},{"cell_type":"code","source":"# 컬럼 데이터 타입으로 분리\nnum_cols = X_train.select_dtypes('number').columns\nnum_cols\n\nobj_cols = X_train.select_dtypes('object').columns\nobj_cols\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.692938Z","iopub.execute_input":"2025-06-18T14:15:57.693235Z","iopub.status.idle":"2025-06-18T14:15:57.706358Z","shell.execute_reply.started":"2025-06-18T14:15:57.693202Z","shell.execute_reply":"2025-06-18T14:15:57.705302Z"}},"outputs":[{"execution_count":199,"output_type":"execute_result","data":{"text/plain":"Index(['workclass', 'education', 'marital.status', 'occupation',\n       'relationship', 'race', 'sex', 'native.country'],\n      dtype='object')"},"metadata":{}}],"execution_count":199},{"cell_type":"code","source":"y_train.info(), y_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.707606Z","iopub.execute_input":"2025-06-18T14:15:57.707896Z","iopub.status.idle":"2025-06-18T14:15:57.736773Z","shell.execute_reply.started":"2025-06-18T14:15:57.707863Z","shell.execute_reply":"2025-06-18T14:15:57.735832Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 26048 entries, 21851 to 25716\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   id      26048 non-null  int64 \n 1   income  26048 non-null  object\ndtypes: int64(1), object(1)\nmemory usage: 610.5+ KB\n","output_type":"stream"},{"execution_count":200,"output_type":"execute_result","data":{"text/plain":"(None,\n           id income\n 21851  21851   >50K\n 7632    7632  <=50K\n 27878  27878  <=50K\n 14121  14121  <=50K\n 32345  32345  <=50K)"},"metadata":{}}],"execution_count":200},{"cell_type":"code","source":"y_train['income'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.738432Z","iopub.execute_input":"2025-06-18T14:15:57.738787Z","iopub.status.idle":"2025-06-18T14:15:57.758352Z","shell.execute_reply.started":"2025-06-18T14:15:57.738719Z","shell.execute_reply":"2025-06-18T14:15:57.757163Z"}},"outputs":[{"execution_count":201,"output_type":"execute_result","data":{"text/plain":"<=50K    19756\n>50K      6292\nName: income, dtype: int64"},"metadata":{}}],"execution_count":201},{"cell_type":"markdown","source":"## 결측치 처리","metadata":{}},{"cell_type":"code","source":"X_train[num_cols].hist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:57.761156Z","iopub.execute_input":"2025-06-18T14:15:57.761464Z","iopub.status.idle":"2025-06-18T14:15:58.660319Z","shell.execute_reply.started":"2025-06-18T14:15:57.761417Z","shell.execute_reply":"2025-06-18T14:15:58.659003Z"}},"outputs":[{"execution_count":202,"output_type":"execute_result","data":{"text/plain":"array([[<AxesSubplot:title={'center':'id'}>,\n        <AxesSubplot:title={'center':'age'}>,\n        <AxesSubplot:title={'center':'fnlwgt'}>],\n       [<AxesSubplot:title={'center':'education.num'}>,\n        <AxesSubplot:title={'center':'capital.gain'}>,\n        <AxesSubplot:title={'center':'capital.loss'}>],\n       [<AxesSubplot:title={'center':'hours.per.week'}>, <AxesSubplot:>,\n        <AxesSubplot:>]], dtype=object)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 9 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":202},{"cell_type":"code","source":"X_train[num_cols] = X_train[num_cols].fillna(X_train[num_cols].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.661823Z","iopub.execute_input":"2025-06-18T14:15:58.662115Z","iopub.status.idle":"2025-06-18T14:15:58.675706Z","shell.execute_reply.started":"2025-06-18T14:15:58.662084Z","shell.execute_reply":"2025-06-18T14:15:58.674628Z"}},"outputs":[],"execution_count":203},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train[num_cols] = scaler.fit_transform(X_train[num_cols])\nX_train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.677315Z","iopub.execute_input":"2025-06-18T14:15:58.677639Z","iopub.status.idle":"2025-06-18T14:15:58.733921Z","shell.execute_reply.started":"2025-06-18T14:15:58.677604Z","shell.execute_reply":"2025-06-18T14:15:58.733024Z"}},"outputs":[{"execution_count":204,"output_type":"execute_result","data":{"text/plain":"                 id           age        fnlwgt  education.num  capital.gain  \\\ncount  2.604800e+04  2.604800e+04  2.604800e+04   2.604800e+04  2.604800e+04   \nmean   5.841799e-17  2.244826e-16 -1.337996e-16  -5.925082e-16  5.118862e-16   \nstd    1.000019e+00  1.000019e+00  1.000019e+00   1.000019e+00  1.000019e+00   \nmin   -1.729434e+00 -1.585721e+00 -1.698451e+00  -3.527640e+00 -1.460122e-01   \n25%   -8.615185e-01 -7.785639e-01 -6.833200e-01  -4.203119e-01 -1.460122e-01   \n50%   -4.944966e-03 -1.181630e-01 -1.053681e-01  -3.189581e-02 -1.460122e-01   \n75%    8.651273e-01  6.889937e-01  4.504824e-01   7.449363e-01 -1.460122e-01   \nmax    1.738182e+00  3.770865e+00  1.240751e+01   2.298601e+00  1.335857e+01   \n\n       capital.loss  hours.per.week  \ncount  2.604800e+04    2.604800e+04  \nmean  -4.450077e-16   -1.654301e-16  \nstd    1.000019e+00    1.000019e+00  \nmin   -2.186350e-01   -3.190766e+00  \n25%   -2.186350e-01   -3.401394e-02  \n50%   -2.186350e-01   -3.401394e-02  \n75%   -2.186350e-01    3.706979e-01  \nmax    1.054537e+01    4.741586e+00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>fnlwgt</th>\n      <th>education.num</th>\n      <th>capital.gain</th>\n      <th>capital.loss</th>\n      <th>hours.per.week</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n      <td>2.604800e+04</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.841799e-17</td>\n      <td>2.244826e-16</td>\n      <td>-1.337996e-16</td>\n      <td>-5.925082e-16</td>\n      <td>5.118862e-16</td>\n      <td>-4.450077e-16</td>\n      <td>-1.654301e-16</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n      <td>1.000019e+00</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-1.729434e+00</td>\n      <td>-1.585721e+00</td>\n      <td>-1.698451e+00</td>\n      <td>-3.527640e+00</td>\n      <td>-1.460122e-01</td>\n      <td>-2.186350e-01</td>\n      <td>-3.190766e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-8.615185e-01</td>\n      <td>-7.785639e-01</td>\n      <td>-6.833200e-01</td>\n      <td>-4.203119e-01</td>\n      <td>-1.460122e-01</td>\n      <td>-2.186350e-01</td>\n      <td>-3.401394e-02</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>-4.944966e-03</td>\n      <td>-1.181630e-01</td>\n      <td>-1.053681e-01</td>\n      <td>-3.189581e-02</td>\n      <td>-1.460122e-01</td>\n      <td>-2.186350e-01</td>\n      <td>-3.401394e-02</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.651273e-01</td>\n      <td>6.889937e-01</td>\n      <td>4.504824e-01</td>\n      <td>7.449363e-01</td>\n      <td>-1.460122e-01</td>\n      <td>-2.186350e-01</td>\n      <td>3.706979e-01</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.738182e+00</td>\n      <td>3.770865e+00</td>\n      <td>1.240751e+01</td>\n      <td>2.298601e+00</td>\n      <td>1.335857e+01</td>\n      <td>1.054537e+01</td>\n      <td>4.741586e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":204},{"cell_type":"code","source":"X_test[num_cols] = scaler.transform(X_test[num_cols])\nX_test.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.735123Z","iopub.execute_input":"2025-06-18T14:15:58.735377Z","iopub.status.idle":"2025-06-18T14:15:58.776617Z","shell.execute_reply.started":"2025-06-18T14:15:58.735346Z","shell.execute_reply":"2025-06-18T14:15:58.775713Z"}},"outputs":[{"execution_count":205,"output_type":"execute_result","data":{"text/plain":"                id          age       fnlwgt  education.num  capital.gain  \\\ncount  6513.000000  6513.000000  6513.000000    6513.000000   6513.000000   \nmean      0.021866    -0.010524     0.009782      -0.002793     -0.002393   \nstd       1.005101     1.004478     1.054686       0.996421      0.986741   \nmin      -1.728902    -1.585721    -1.631227      -3.527640     -0.146012   \n25%      -0.865086    -0.851942    -0.699024      -0.420312     -0.146012   \n50%       0.038666    -0.118163    -0.114752      -0.031896     -0.146012   \n75%       0.897157     0.615616     0.483345       0.744936     -0.146012   \nmax       1.737969     3.770865    12.127098       2.298601     13.358569   \n\n       capital.loss  hours.per.week  \ncount   6513.000000     6513.000000  \nmean      -0.014502        0.006973  \nstd        0.978453        0.997128  \nmin       -0.218635       -3.190766  \n25%       -0.218635       -0.034014  \n50%       -0.218635       -0.034014  \n75%       -0.218635        0.370698  \nmax        9.097317        4.741586  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>fnlwgt</th>\n      <th>education.num</th>\n      <th>capital.gain</th>\n      <th>capital.loss</th>\n      <th>hours.per.week</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n      <td>6513.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.021866</td>\n      <td>-0.010524</td>\n      <td>0.009782</td>\n      <td>-0.002793</td>\n      <td>-0.002393</td>\n      <td>-0.014502</td>\n      <td>0.006973</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.005101</td>\n      <td>1.004478</td>\n      <td>1.054686</td>\n      <td>0.996421</td>\n      <td>0.986741</td>\n      <td>0.978453</td>\n      <td>0.997128</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-1.728902</td>\n      <td>-1.585721</td>\n      <td>-1.631227</td>\n      <td>-3.527640</td>\n      <td>-0.146012</td>\n      <td>-0.218635</td>\n      <td>-3.190766</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-0.865086</td>\n      <td>-0.851942</td>\n      <td>-0.699024</td>\n      <td>-0.420312</td>\n      <td>-0.146012</td>\n      <td>-0.218635</td>\n      <td>-0.034014</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.038666</td>\n      <td>-0.118163</td>\n      <td>-0.114752</td>\n      <td>-0.031896</td>\n      <td>-0.146012</td>\n      <td>-0.218635</td>\n      <td>-0.034014</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.897157</td>\n      <td>0.615616</td>\n      <td>0.483345</td>\n      <td>0.744936</td>\n      <td>-0.146012</td>\n      <td>-0.218635</td>\n      <td>0.370698</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.737969</td>\n      <td>3.770865</td>\n      <td>12.127098</td>\n      <td>2.298601</td>\n      <td>13.358569</td>\n      <td>9.097317</td>\n      <td>4.741586</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":205},{"cell_type":"code","source":"for col in obj_cols:\n    X_train[col] = X_train[col].fillna(X_train[col].mode()[0])\n    X_test[col] = X_test[col].fillna(X_test[col].mode()[0])\nX_train.info(), X_test.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.777883Z","iopub.execute_input":"2025-06-18T14:15:58.778139Z","iopub.status.idle":"2025-06-18T14:15:58.860420Z","shell.execute_reply.started":"2025-06-18T14:15:58.778107Z","shell.execute_reply":"2025-06-18T14:15:58.859528Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 26048 entries, 21851 to 25716\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   id              26048 non-null  float64\n 1   age             26048 non-null  float64\n 2   workclass       26048 non-null  object \n 3   fnlwgt          26048 non-null  float64\n 4   education       26048 non-null  object \n 5   education.num   26048 non-null  float64\n 6   marital.status  26048 non-null  object \n 7   occupation      26048 non-null  object \n 8   relationship    26048 non-null  object \n 9   race            26048 non-null  object \n 10  sex             26048 non-null  object \n 11  capital.gain    26048 non-null  float64\n 12  capital.loss    26048 non-null  float64\n 13  hours.per.week  26048 non-null  float64\n 14  native.country  26048 non-null  object \ndtypes: float64(7), object(8)\nmemory usage: 3.2+ MB\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 6513 entries, 20901 to 25782\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   id              6513 non-null   float64\n 1   age             6513 non-null   float64\n 2   workclass       6513 non-null   object \n 3   fnlwgt          6513 non-null   float64\n 4   education       6513 non-null   object \n 5   education.num   6513 non-null   float64\n 6   marital.status  6513 non-null   object \n 7   occupation      6513 non-null   object \n 8   relationship    6513 non-null   object \n 9   race            6513 non-null   object \n 10  sex             6513 non-null   object \n 11  capital.gain    6513 non-null   float64\n 12  capital.loss    6513 non-null   float64\n 13  hours.per.week  6513 non-null   float64\n 14  native.country  6513 non-null   object \ndtypes: float64(7), object(8)\nmemory usage: 814.1+ KB\n","output_type":"stream"},{"execution_count":206,"output_type":"execute_result","data":{"text/plain":"(None, None)"},"metadata":{}}],"execution_count":206},{"cell_type":"code","source":"len(obj_cols)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.861658Z","iopub.execute_input":"2025-06-18T14:15:58.861952Z","iopub.status.idle":"2025-06-18T14:15:58.868535Z","shell.execute_reply.started":"2025-06-18T14:15:58.861919Z","shell.execute_reply":"2025-06-18T14:15:58.867204Z"}},"outputs":[{"execution_count":207,"output_type":"execute_result","data":{"text/plain":"8"},"metadata":{}}],"execution_count":207},{"cell_type":"code","source":"X_total = pd.concat([X_train, X_test])\n\nX_total = pd.get_dummies(X_total, columns=obj_cols)\n\nX_train = X_total.iloc[:len(X_train),:]\nX_test = X_total.iloc[len(X_train)+1:,:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.869952Z","iopub.execute_input":"2025-06-18T14:15:58.870258Z","iopub.status.idle":"2025-06-18T14:15:58.929571Z","shell.execute_reply.started":"2025-06-18T14:15:58.870217Z","shell.execute_reply":"2025-06-18T14:15:58.928559Z"}},"outputs":[],"execution_count":208},{"cell_type":"code","source":"X_total.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:15:58.930816Z","iopub.execute_input":"2025-06-18T14:15:58.931049Z","iopub.status.idle":"2025-06-18T14:15:58.937730Z","shell.execute_reply.started":"2025-06-18T14:15:58.931021Z","shell.execute_reply":"2025-06-18T14:15:58.936707Z"}},"outputs":[{"execution_count":209,"output_type":"execute_result","data":{"text/plain":"(32561, 106)"},"metadata":{}}],"execution_count":209},{"cell_type":"code","source":"X_train.shape, X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T14:16:03.825982Z","iopub.execute_input":"2025-06-18T14:16:03.826270Z","iopub.status.idle":"2025-06-18T14:16:03.833182Z","shell.execute_reply.started":"2025-06-18T14:16:03.826240Z","shell.execute_reply":"2025-06-18T14:16:03.831926Z"}},"outputs":[{"execution_count":210,"output_type":"execute_result","data":{"text/plain":"((26048, 106), (6512, 106))"},"metadata":{}}],"execution_count":210},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 피처엔지니어링","metadata":{}},{"cell_type":"code","source":"# target값 변경\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.583072Z","iopub.execute_input":"2021-12-01T23:48:26.583262Z","iopub.status.idle":"2021-12-01T23:48:26.595432Z","shell.execute_reply.started":"2021-12-01T23:48:26.583236Z","shell.execute_reply":"2021-12-01T23:48:26.594535Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 검증용 데이터 분리","metadata":{}},{"cell_type":"code","source":"# 학습용 데이터와 검증용 데이터로 구분\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.596388Z","iopub.execute_input":"2021-12-01T23:48:26.596608Z","iopub.status.idle":"2021-12-01T23:48:26.608873Z","shell.execute_reply.started":"2021-12-01T23:48:26.596578Z","shell.execute_reply":"2021-12-01T23:48:26.608265Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_tr.head()","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.609751Z","iopub.execute_input":"2021-12-01T23:48:26.609986Z","iopub.status.idle":"2021-12-01T23:48:26.622785Z","shell.execute_reply.started":"2021-12-01T23:48:26.609965Z","shell.execute_reply":"2021-12-01T23:48:26.62241Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# id 삭제\nX_tr = X_tr.drop('id', axis=1)\nX_val = X_val.drop('id', axis=1)","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.623681Z","iopub.execute_input":"2021-12-01T23:48:26.62384Z","iopub.status.idle":"2021-12-01T23:48:26.630854Z","shell.execute_reply.started":"2021-12-01T23:48:26.623821Z","shell.execute_reply":"2021-12-01T23:48:26.629537Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# id 삭제된 것 확인\nX_tr.head(1)","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.632007Z","iopub.execute_input":"2021-12-01T23:48:26.632426Z","iopub.status.idle":"2021-12-01T23:48:26.650209Z","shell.execute_reply.started":"2021-12-01T23:48:26.6324Z","shell.execute_reply":"2021-12-01T23:48:26.649646Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 & 평가","metadata":{}},{"cell_type":"code","source":"# 의사결정나무\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = DecisionTreeClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.652402Z","iopub.execute_input":"2021-12-01T23:48:26.652562Z","iopub.status.idle":"2021-12-01T23:48:26.789925Z","shell.execute_reply.started":"2021-12-01T23:48:26.652542Z","shell.execute_reply":"2021-12-01T23:48:26.789417Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 랜덤포레스트\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:26.792129Z","iopub.execute_input":"2021-12-01T23:48:26.792485Z","iopub.status.idle":"2021-12-01T23:48:29.843307Z","shell.execute_reply.started":"2021-12-01T23:48:26.792447Z","shell.execute_reply":"2021-12-01T23:48:29.841704Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# test데이터 예측 (pop을 활용하면 값을 넘겨주고 삭제 됨)\nX_test_id = X_test.pop('id')\npred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:29.844568Z","iopub.execute_input":"2021-12-01T23:48:29.844759Z","iopub.status.idle":"2021-12-01T23:48:29.992341Z","shell.execute_reply.started":"2021-12-01T23:48:29.844732Z","shell.execute_reply":"2021-12-01T23:48:29.99154Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# csv생성\noutput = pd.DataFrame({'id': X_test_id, 'income':pred})\noutput.to_csv(\"000000.csv\", index=False)\noutput.head()","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:29.993978Z","iopub.execute_input":"2021-12-01T23:48:29.994264Z","iopub.status.idle":"2021-12-01T23:48:30.015946Z","shell.execute_reply.started":"2021-12-01T23:48:29.994226Z","shell.execute_reply":"2021-12-01T23:48:30.015026Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 채점 (수험자는 확인 불가)","metadata":{}},{"cell_type":"code","source":"y_test = (y_test['income'] != '<=50K').astype(int)\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test, pred)))","metadata":{"execution":{"iopub.status.busy":"2021-12-01T23:48:30.016999Z","iopub.execute_input":"2021-12-01T23:48:30.017365Z","iopub.status.idle":"2021-12-01T23:48:30.027144Z","shell.execute_reply.started":"2021-12-01T23:48:30.01733Z","shell.execute_reply":"2021-12-01T23:48:30.026336Z"},"trusted":true},"outputs":[],"execution_count":null}]}